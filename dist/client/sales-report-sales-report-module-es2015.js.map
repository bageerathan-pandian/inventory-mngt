{"version":3,"sources":["./src/app/component/inventory-mngt/reports/sales-report/sales-report.component.html","./src/app/component/inventory-mngt/reports/sales-report/sales-report-routing.module.ts","./src/app/component/inventory-mngt/reports/sales-report/sales-report.component.scss","./src/app/component/inventory-mngt/reports/sales-report/sales-report.component.ts","./src/app/component/inventory-mngt/reports/sales-report/sales-report.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,4KAA6G,yYAAyY,WAAW,aAAa,qBAAqB,mCAAmC,cAAc,aAAa,mEAAmE,iBAAiB,mBAAmB,wBAAwB,qDAAqD,8bAA8b,qBAAqB,kGAAkG,cAAc,aAAa,qKAAqK,kLAAkL,sOAAsO,mKAAmK,mBAAmB,iCAAiC,wpBAAwpB,YAAY,ygBAAygB,yCAAyC,iEAAiE,yDAAyD,+DAA+D,4CAA4C,mDAAmD,2CAA2C,uCAAuC,8CAA8C,uEAAuE,0BAA0B,sNAAsN,mCAAmC,0KAA0K,wBAAwB,kEAAkE,yBAAyB,oVAAoV,gCAAgC,MAAM,+BAA+B,cAAc,qBAAqB,wM;;;;;;;;;;;;;;;;;;;ACAhwJ;AACc;AACS;AAGhE,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAC,EAAE,EAAC,SAAS,EAAC,4EAAoB,EAAC;CACzC,CAAC;AAMF,IAAa,wBAAwB,GAArC,MAAa,wBAAwB;CAAI;AAA5B,wBAAwB;IAJpC,8DAAQ,CAAC;QACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;KACxB,CAAC;GACW,wBAAwB,CAAI;AAAJ;;;;;;;;;;;;;ACbrC;AAAe,6GAA8C,2M;;;;;;;;;;;;;;;;;;;;;;;;ACAX;AACjB;AACQ;AACmB;AACI;AACF;AAQ9D,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;IAiB/B,YAAoB,MAAa,EAAS,aAA2B,EAAS,cAA8B;QAAxF,WAAM,GAAN,MAAM,CAAO;QAAS,kBAAa,GAAb,aAAa,CAAc;QAAS,mBAAc,GAAd,cAAc,CAAgB;QAZ5G,gBAAW,GAAQ,EAAE,CAAC;QACtB,oBAAe,GAAQ,EAAE;QACzB,iBAAY,GAAG,EAAC,KAAK,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE,EAAC,CAAC;QAElE,WAAM,GAAQ;YACZ,OAAO,EAAE,CAAC,mCAAM,EAAE,CAAC,MAAM,EAAE,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE,CAAC;YAC/C,WAAW,EAAE,CAAC,mCAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,mCAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;YAC3F,aAAa,EAAE,CAAC,mCAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE,CAAC;YACzE,cAAc,EAAE,CAAC,mCAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,mCAAM,EAAE,CAAC,MAAM,EAAE,CAAC;YAC3E,YAAY,EAAE,CAAC,mCAAM,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,mCAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;YACpF,YAAY,EAAE,CAAC,mCAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,mCAAM,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;SAC/H;QAEG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG;YACd,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAE,YAAY,EAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC9C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,2BAA2B,CAAC,CAAC;gBAAA,CAAC;aACrD;YACD,EAAC,KAAK,EAAC,SAAS,EAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;oBAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,yBAAyB,CAAC,CAAC;gBAAA,CAAC;aACnD;YACD,EAAC,KAAK,EAAC,cAAc,EAAC;SACzB,CAAC;QAGA,IAAI,CAAC,IAAI,GAAG;YACV,iCAAiC;YACjC,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE;YACzC,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE;YACjD,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,WAAW,EAAE;YAC3C,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE;YACzC,EAAE,KAAK,EAAE,aAAa,EAAE,MAAM,EAAE,aAAa,EAAE;YAC/C,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAAE,cAAc,EAAE;YACjD,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,cAAc,EAAE;YAC9C,EAAE,KAAK,EAAE,gBAAgB,EAAE,MAAM,EAAE,QAAQ,EAAE;SAChD,CAAC;IAGF,CAAC;IAED,QAAQ;QAEN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAE/E,CAAC;IAED,MAAM,CAAC,KAAK;QACV,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;QAClB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAE/D,CAAC;IAED,uBAAuB,CAAC,SAAS,EAAE,OAAO;QACxC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI;QACnB,IAAI,CAAC,aAAa,CAAC,uBAAuB,CAAC,SAAS,EAAE,OAAO,CAAC;aAC7D,SAAS,CAAC,CAAC,IAAQ,EAAC,EAAE;YACrB,OAAO,CAAC,GAAG,CAAC,aAAa,EAAC,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAAG,KAAI,IAAI,SAAS,IAAI,IAAI,EAAC;gBAChD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;oBACxB,cAAc,EAAG,SAAS,CAAC,kBAAkB,CAAC,YAAY;oBAC1D,cAAc,EAAG,SAAS,CAAC,kBAAkB,CAAC,YAAY;oBAC1D,YAAY,EAAG,SAAS,CAAC,gBAAgB,CAAC,UAAU;oBACpD,WAAW,EAAG,SAAS,CAAC,SAAS;oBACjC,aAAa,EAAG,SAAS,CAAC,WAAW;oBACrC,UAAU,EAAG,SAAS,CAAC,QAAQ;oBAC/B,aAAa,EAAG,SAAS,CAAC,WAAW;oBACrC,cAAc,EAAG,SAAS,CAAC,YAAY;oBACvC,cAAc,EAAI,SAAS,CAAC,SAAS;oBACrC,gBAAgB,EAAG,SAAS,CAAC,cAAc,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,UAAU;iBACvE,CAAC;aACH;QACH,CAAC,CAAC;IACJ,CAAC;IAGH,WAAW;QACT,yIAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACjE,MAAM,QAAQ,GAAG,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;YACzE,MAAM,WAAW,GAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YACnF,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,MAAW,EAAE,QAAgB;QAC3C,+KAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAClC,IAAI,UAAU,GAAG,iFAAiF,CAAC;YACnG,IAAI,eAAe,GAAG,OAAO,CAAC;YAC9B,MAAM,IAAI,GAAS,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;gBAClC,IAAI,EAAE,UAAU;aACnB,CAAC,CAAC;YACH,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,GAAG,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,eAAe,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IACL,CAAC;CAGA;;YAvF4B,sDAAM;YAAuB,2EAAa;YAAyB,6EAAc;;AAjBjG,oBAAoB;IANhC,+DAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;QAC5B,yQAA4C;QAE5C,SAAS,EAAE,CAAC,+DAAmB,CAAC;;KACjC,CAAC;2EAkB2B,sDAAM,EAAuB,2EAAa,EAAyB,6EAAc;GAjBjG,oBAAoB,CAwGhC;AAxGgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbQ;AACM;AACiB;AACS;AACnB;AACV;AACF;AACkB;AACR;AACN;AACsB;AACvB;AAkB7C,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;CAAI;AAArB,iBAAiB;IAf7B,8DAAQ,CAAC;QACR,YAAY,EAAE,CAAC,4EAAoB,CAAC;QACpC,OAAO,EAAE;YACP,4DAAY;YACZ,qFAAwB;YACxB,2DAAW;YACX,mEAAgB;YAChB,yDAAW;YACX,uDAAU;YACV,yEAAmB;YACnB,iEAAe;YACf,4DAAY;YACZ,kFAAoB,CAAC,OAAO,EAAE;SAC/B;KACF,CAAC;GACW,iBAAiB,CAAI;AAAJ","file":"sales-report-sales-report-module-es2015.js","sourcesContent":["export default \"\\r\\n\\r\\n<p-breadcrumb [model]=\\\"bradCrum\\\"></p-breadcrumb>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<div style=\\\"margin-top: 15px;\\\">\\r\\n\\r\\n<p-card>\\r\\n  \\r\\n \\r\\n\\r\\n<p-table  #dt  [value]=\\\"invoiceList\\\"  [loading]=\\\"loading\\\"  [columns]=\\\"cols\\\" dataKey=\\\"_id\\\" [paginator]=\\\"true\\\"  [rowsPerPageOptions]=\\\"[10,50,100]\\\"  [globalFilterFields]=\\\"['_id','invoice_details_id.invoice_code']\\\"  [rows]=\\\"10\\\" >\\r\\n\\r\\n<ng-template pTemplate=\\\"caption\\\">\\r\\n  \\r\\n  <div class=\\\"ui-helper-clearfix\\\" style=\\\"text-align: left;width: 50%; float: left; margin-bottom: 10px;\\\">\\r\\n    <div style=\\\"width: 68%;padding: 0 1%; float: left;\\\">\\r\\n      <!-- <div id=\\\"reportrange\\\" style=\\\"background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc;\\\">\\r\\n        <i class=\\\"fa fa-calendar\\\"></i>&nbsp;\\r\\n        <span></span> <i class=\\\"fa fa-caret-down\\\"></i>\\r\\n      </div> -->\\r\\n      <input type=\\\"text\\\" pInputText [(ngModel)]=\\\"selectedDate\\\" \\r\\n      ngxDaterangepickerMd\\r\\n      [showCustomRangeLabel]=\\\"true\\\"\\r\\n      [alwaysShowCalendars]=\\\"true\\\"\\r\\n      [ranges]=\\\"ranges\\\"\\r\\n      [linkedCalendars]=\\\"true\\\" \\r\\n      [showCancel]=\\\"true\\\"\\r\\n       placeholder=\\\"Select please...\\\"\\r\\n        readonly\\r\\n        [locale]=\\\"{format: 'DD/MM/YYYY'}\\\"\\r\\n         (ngModelChange)=\\\"change($event)\\\" />\\r\\n    </div>\\r\\n    <div style=\\\"width: 28%;padding: 0 1%; float: left;\\\">\\r\\n             <!-- <button type=\\\"button\\\" pButton icon=\\\"pi pi-file-o\\\" iconPos=\\\"left\\\" label=\\\"CSV\\\" (click)=\\\"dt.exportCSV()\\\" style=\\\"margin-right: 0.5em;\\\"></button> -->\\r\\n             <button type=\\\"button\\\" pButton icon=\\\"pi pi-file-excel\\\" iconPos=\\\"left\\\" label=\\\"EXCEL\\\" (click)=\\\"exportExcel()\\\" style=\\\"margin-right: 0.5em;\\\" class=\\\"ui-button-success\\\"></button>\\r\\n             <!-- <button type=\\\"button\\\" pButton icon=\\\"pi pi-file-pdf\\\" iconPos=\\\"left\\\" label=\\\"PDF\\\" (click)=\\\"exportPdf()\\\" class=\\\"ui-button-warning\\\"  style=\\\"margin-right: 0.5em;\\\" ></button> -->\\r\\n             <!-- <button type=\\\"button\\\" pButton icon=\\\"pi pi-file\\\" iconPos=\\\"left\\\" label=\\\"CSV - Selection Only\\\" (click)=\\\"dt.exportCSV({selectionOnly:true})\\\"  style=\\\"margin-right: 0.5em;\\\"  ></button> -->\\r\\n        \\r\\n    </div>\\r\\n    \\r\\n\\r\\n    </div>\\r\\n<div style=\\\"text-align: right\\\">        \\r\\n  <i class=\\\"fa fa-search\\\" style=\\\"margin:4px 4px 0 0\\\"></i> \\r\\n  <input type=\\\"text\\\" pInputText size=\\\"50\\\" placeholder=\\\"Global Filter\\\" (input)=\\\"dt.filterGlobal($event.target.value, 'contains')\\\"   style=\\\"width:auto\\\">\\r\\n</div>\\r\\n</ng-template>\\r\\n<ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n<tr>\\r\\n      <th style=\\\"width: 3em\\\">\\r\\n              <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\\r\\n          </th>\\r\\n      <th *ngFor=\\\"let col of columns\\\" [pSortableColumn]=\\\"col.field\\\" pResizableColumn >\\r\\n              {{col.header}}\\r\\n              <p-sortIcon [field]=\\\"col.field\\\" ariaLabel=\\\"Activate to sort\\\" ariaLabelDesc=\\\"Activate to sort in descending order\\\" ariaLabelAsc=\\\"Activate to sort in ascending order\\\"></p-sortIcon>\\r\\n\\r\\n          </th>\\r\\n</tr>\\r\\n\\r\\n</ng-template>\\r\\n<ng-template pTemplate=\\\"body\\\" let-rowData let-ri=\\\"rowIndex\\\">\\r\\n  <tr [pSelectableRow]=\\\"rowData\\\">\\r\\n        <td>\\r\\n                <p-tableCheckbox [value]=\\\"rowData\\\"></p-tableCheckbox>\\r\\n            </td>\\r\\n            <td>\\r\\n                  {{rowData.invoice_details_id.invoice_code}}\\r\\n            </td>\\r\\n            <td>\\r\\n                  {{rowData.invoice_details_id.invoice_date | date:'medium'}}\\r\\n            </td>\\r\\n            <td>\\r\\n                {{rowData.sub_total  | currency : 'INR':true}}\\r\\n        </td>\\r\\n        <td>\\r\\n            {{rowData.discount  | currency : 'INR':true}}\\r\\n    </td>\\r\\n    <td>\\r\\n        {{rowData.grand_total  | currency : 'INR':true}}\\r\\n</td>\\r\\n<td>\\r\\n  <ng-container *ngIf=\\\"rowData.payment_type == 1; then thenPaymentTemplate; else elsePaymentTemplate\\\"></ng-container>\\r\\n  <ng-template #thenPaymentTemplate>\\r\\n    Cash\\r\\n  </ng-template>\\r\\n  <ng-template #elsePaymentTemplate>\\r\\n    Card\\r\\n  </ng-template>\\r\\n\\r\\n</td>\\r\\n<td>\\r\\n{{rowData.updatedAt | date:'medium'}}\\r\\n</td>\\r\\n    <td>\\r\\n        <!-- <p-inputSwitch [(ngModel)]=\\\"rowData.payment_status\\\" (onChange)=\\\"onChangeStatus($event)\\\"></p-inputSwitch>  -->\\r\\n        <!-- {{rowData.payment_status}} -->\\r\\n        <ng-container *ngIf=\\\"rowData.payment_status == 1; then thenStatusTemplate; else elseStatusTemplate\\\"></ng-container>\\r\\n        <ng-template #thenStatusTemplate>\\r\\n          Paid\\r\\n        </ng-template>\\r\\n        <ng-template #elseStatusTemplate>\\r\\n          Pending\\r\\n        </ng-template>\\r\\n    </td>\\r\\n</tr>\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n<ng-template pTemplate=\\\"paginatorleft\\\" let-state>\\r\\nShowing {{(state.page  * state.rows) + 1}} to {{state.rows * (state.page + 1)}} of <strong>{{invoiceList?.length}}</strong> entries\\r\\n</ng-template>\\r\\n\\r\\n\\r\\n</p-table>\\r\\n\\r\\n\\r\\n<p-confirmDialog header=\\\"Confirmation\\\" icon=\\\"pi pi-exclamation-triangle\\\"></p-confirmDialog>\\r\\n\\r\\n</p-card>\\r\\n</div>\\r\\n\\r\\n\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SalesReportComponent } from './sales-report.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {path:'',component:SalesReportComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SalesReportRoutingModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudC9pbnZlbnRvcnktbW5ndC9yZXBvcnRzL3NhbGVzLXJlcG9ydC9zYWxlcy1yZXBvcnQuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport { Router } from '@angular/router';\r\nimport { ConfirmationService, MenuItem } from 'primeng/api';\r\nimport { SessionService } from 'src/app/shared/session.service';\r\nimport { ReportService } from 'src/app/shared/report.service';\r\n\r\n@Component({\r\n  selector: 'app-sales-report',\r\n  templateUrl: './sales-report.component.html',\r\n  styleUrls: ['./sales-report.component.scss'],\r\n  providers :[ConfirmationService]\r\n})\r\nexport class SalesReportComponent implements OnInit {\r\n\r\n  loading: boolean;\r\n  public bradCrum: MenuItem[];\r\n  cols: any[];\r\n  invoiceList: any = [];\r\n  reportListSheet: any = []\r\n  selectedDate = {start: moment().format(), end: moment().format()};\r\n  alwaysShowCalendars: boolean;\r\n  ranges: any = {\r\n    'Today': [moment().format(), moment().format()],\r\n    'Yesterday': [moment().subtract(1, 'days').format(), moment().subtract(1, 'days').format()],\r\n    'Last 7 Days': [moment().subtract(6, 'days').format(), moment().format()],\r\n    'Last 30 Days': [moment().subtract(29, 'days').format(), moment().format()],\r\n    'This Month': [moment().startOf('month').format(), moment().endOf('month').format()],\r\n    'Last Month': [moment().subtract(1, 'month').startOf('month').format(), moment().subtract(1, 'month').endOf('month').format()]\r\n  }\r\n  constructor(private router:Router,private reportService:ReportService, public sessionService: SessionService ) {\r\n      this.alwaysShowCalendars = true;\r\n    this.bradCrum = [\r\n      {label:'',icon: 'pi pi-home',command: (event) => {\r\n        this.router.navigate(['/inventory-mngt/dashboard'])}\r\n      },    \r\n      {label:'Reports',command: (event) => {\r\n        this.router.navigate(['/inventory-mngt/reports'])}\r\n      },\r\n      {label:'Sales report'},\r\n  ];\r\n  \r\n    \r\n    this.cols = [\r\n      // { field: '_id', header: '#' },\r\n      { field: 'invoice_code', header: 'Code' },\r\n      { field: 'invoice_date', header: 'Invoice Date' },\r\n      { field: 'sub_total', header: 'Sub Total' },\r\n      { field: 'discount', header: 'Discount' },\r\n      { field: 'grand_total', header: 'Grand Total' },\r\n      { field: 'payment_type', header: 'Payment Type' },\r\n      { field: 'updatedAt', header: 'Updated Date' },\r\n      { field: 'payment_status', header: 'Status' }\r\n  ];\r\n\r\n     \r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    console.log(this.selectedDate)\r\n    this.getSalesReportByCompany(this.selectedDate.start, this.selectedDate.end);\r\n  \r\n  }\r\n\r\n  change(event){\r\n    console.log(event)\r\n    this.getSalesReportByCompany(event.startDate, event.endDate);\r\n    \r\n  }\r\n\r\n  getSalesReportByCompany(from_date, to_date){\r\n    console.log(from_date, to_date)\r\n    this.loading = true\r\n    this.reportService.getSalesReportByCompany(from_date, to_date)\r\n    .subscribe((data:any)=>{\r\n      console.log('invoiceList',data);\r\n      this.invoiceList = data;\r\n      this.loading = false;   for(let sheetData of data){\r\n        this.reportListSheet.push({\r\n          'Invoice Code' : sheetData.invoice_details_id.invoice_code,\r\n          'Invoice Date' : sheetData.invoice_details_id.invoice_date,\r\n          'Stock Name' : sheetData.stock_details_id.stock_name,\r\n          'Stock Qty' : sheetData.stock_qty,\r\n          'Stock Price' : sheetData.stock_price,\r\n          'Discount' : sheetData.discount,\r\n          'Total Price' : sheetData.grand_total,\r\n          'Payment Type' : sheetData.payment_type,\r\n          'Updated date'  : sheetData.updatedAt,\r\n          'Payment Status' : sheetData.payment_status == 1 ? 'Paid' : 'Not Paid'\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n\r\nexportExcel() {\r\n  import(\"xlsx\").then(xlsx => {\r\n      const worksheet = xlsx.utils.json_to_sheet(this.reportListSheet);\r\n      const workbook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\r\n      const excelBuffer: any = xlsx.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n      this.saveAsExcelFile(excelBuffer, \"salesReportTable\");\r\n  });\r\n}\r\n\r\nsaveAsExcelFile(buffer: any, fileName: string): void {\r\n  import(\"file-saver\").then(FileSaver => {\r\n      let EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n      let EXCEL_EXTENSION = '.xlsx';\r\n      const data: Blob = new Blob([buffer], {\r\n          type: EXCEL_TYPE\r\n      });\r\n      FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\r\n  });\r\n}\r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SalesReportComponent } from './sales-report.component';\r\nimport { SalesReportRoutingModule } from './sales-report-routing.module';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { TableModule } from 'primeng/table';\r\nimport { CardModule } from 'primeng/card';\r\nimport { ConfirmDialogModule } from 'primeng/confirmdialog';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { NgxDaterangepickerMd } from 'ngx-daterangepicker-material';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  declarations: [SalesReportComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SalesReportRoutingModule,\r\n    FormsModule,\r\n    BreadcrumbModule,\r\n    TableModule,\r\n    CardModule,\r\n    ConfirmDialogModule,\r\n    InputTextModule,\r\n    ButtonModule,\r\n    NgxDaterangepickerMd.forRoot()\r\n  ]\r\n})\r\nexport class SalesReportModule { }\r\n"],"sourceRoot":"webpack:///"}